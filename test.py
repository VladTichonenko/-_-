from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
import sqlite3
import logging
import random
import qrcode
from io import BytesIO

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
API_TOKEN =  "7835080263:AAGS8x3VbbVwxK46ddM0RglJIS2lUXAo8y4"
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("bot_database.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
# –ò–∑–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è URL
cursor.execute("""
CREATE TABLE IF NOT EXISTS channels (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    channel_id TEXT NOT NULL UNIQUE,
    channel_name TEXT NOT NULL,
    channel_url TEXT NOT NULL
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS subscribers (
    user_id INTEGER NOT NULL,
    channel_id TEXT NOT NULL,
    UNIQUE(user_id, channel_id)
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS users_stat (
    user_id INTEGER PRIMARY KEY,
    points INTEGER DEFAULT 0,
    ref_code TEXT UNIQUE,
    referrals TEXT DEFAULT ''
)
""")
conn.commit()



def generate_ref_code():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ 4-–∑–Ω–∞—á–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞."""
    return str(random.randint(1000, 9999))

def add_user_to_db(user_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç."""
    cursor.execute("SELECT * FROM users_stat WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if not user:
        ref_code = generate_ref_code()
        while cursor.execute("SELECT * FROM users_stat WHERE ref_code = ?", (ref_code,)).fetchone():
            ref_code = generate_ref_code()
        cursor.execute("INSERT INTO users_stat (user_id, ref_code) VALUES (?, ?)", (user_id, ref_code))
        conn.commit()

def get_user_data(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã."""
    cursor.execute("SELECT * FROM users_stat WHERE user_id = ?", (user_id,))
    return cursor.fetchone()

def add_referral(referrer_id, referral_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞."""
    referrer_data = get_user_data(referrer_id)
    if referrer_data:
        referrals = referrer_data[3].split(',') if referrer_data[3] else []
        if str(referral_id) not in referrals:
            referrals.append(str(referral_id))
            cursor.execute(
                "UPDATE users_stat SET points = points + 15, referrals = ? WHERE user_id = ?",
                (','.join(referrals), referrer_id)
            )
            conn.commit()

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    channels = cursor.execute("SELECT channel_id, channel_name FROM channels").fetchall()

    add_user_to_db(user_id)
    args = message.get_args()
    if args:
        try:
            referrer_id = cursor.execute("SELECT user_id FROM users_stat WHERE ref_code = ?", (args,)).fetchone()
            if referrer_id and referrer_id[0] != user_id:
                add_referral(referrer_id[0], user_id)
                await bot.send_message(referrer_id[0], f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.full_name}!")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {e}")

    if not channels:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    keyboard = types.InlineKeyboardMarkup()
    for channel_id, channel_name in channels:
        keyboard.add(
            types.InlineKeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel_name}", callback_data=f"subscribe_{channel_id}"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=keyboard)

@dp.message_handler(commands=['prof'])
async def show_profile(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /prof –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    if user_data:
        ref_code = user_data[2]
        points = user_data[1]
        referrals = user_data[3]
        referral_list = referrals.split(',') if referrals else []
        referral_names = []
        for ref_id in referral_list:
            user = await bot.get_chat(ref_id)
            referral_names.append(user.full_name)

        referral_names_str = '\n'.join(referral_names) if referral_names else "–ù–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥", callback_data="get_qr"))

        await message.answer(
            f"üëæ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"–ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥: {ref_code}\n"
            f"–ë–∞–ª–ª—ã üí∏: {points}\n"
            f"____________________________\n"
            f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{(await bot.get_me()).username}?start={ref_code}\n"
            f"–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n{referral_names_str}",
            reply_markup=keyboard
        )
    else:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.callback_query_handler(lambda c: c.data == "get_qr")
async def generate_qr_code(callback_query: types.CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏."""
    user_id = callback_query.from_user.id
    user_data = get_user_data(user_id)

    if user_data:
        ref_code = user_data[2]
        bot_username = (await bot.get_me()).username
        referral_link = f"https://t.me/{bot_username}?start={ref_code}"

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(referral_link)
        qr.make(fit=True)

        img = qr.make_image(fill_color="black", back_color="white")
        bio = BytesIO()
        img.save(bio, format="PNG")
        bio.seek(0)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ QR-–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_photo(
            callback_query.message.chat.id,
            photo=bio,
            caption=f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π QR-–∫–æ–¥:\n–°—Å—ã–ª–∫–∞: {referral_link}"
        )
    else:
        await callback_query.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", show_alert=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
class AdminStates(StatesGroup):
    waiting_for_channel_id = State()  # –û–∂–∏–¥–∞–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞
    waiting_for_channel_url = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∫–∞–Ω–∞–ª–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
ADMINS = [6850731097]  # –£–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

def is_admin(user_id):
    return user_id in ADMINS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
@dp.callback_query_handler(lambda c: c.data.startswith("subscribe_"))
async def subscribe_to_channel(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    channel_id = callback_query.data.split("_")[1]

    try:
        cursor.execute("INSERT INTO subscribers (user_id, channel_id) VALUES (?, ?)", (user_id, channel_id))
        conn.commit()
        await callback_query.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
    except sqlite3.IntegrityError:
        await callback_query.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.", show_alert=True)

# –ö–æ–º–∞–Ω–¥–∞ /admin
@dp.message_handler(commands=["admin"])
async def admin_command(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:")
    await AdminStates.waiting_for_channel_id.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∫–∞–Ω–∞–ª–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
@dp.message_handler(state=AdminStates.waiting_for_channel_id)
async def add_channel_id(message: types.Message, state: FSMContext):
    channel_id = message.text

    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º ID
        chat = await bot.get_chat(channel_id)
        channel_name = chat.title

        # –°–ø—Ä–æ—Å–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        await state.update_data(channel_id=channel_id, channel_name=channel_name)
        await message.answer(f"–ö–∞–Ω–∞–ª <b>{channel_name}</b> –Ω–∞–π–¥–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:")
        await AdminStates.waiting_for_channel_url.set()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –∫–∞–Ω–∞–ª–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
@dp.message_handler(state=AdminStates.waiting_for_channel_url)
async def add_channel_url(message: types.Message, state: FSMContext):
    channel_url = message.text
    data = await state.get_data()

    channel_id = data.get('channel_id')
    channel_name = data.get('channel_name')

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–µ —Å URL
        cursor.execute(
            "INSERT INTO channels (channel_id, channel_name, channel_url) VALUES (?, ?, ?)",
            (channel_id, channel_name, channel_url)
        )
        conn.commit()

        await message.answer(f"–ö–∞–Ω–∞–ª <b>{channel_name}</b> —Å URL {channel_url} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

    await state.finish()




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ
@dp.channel_post_handler()
async def on_new_post(message: types.Message):
    channels = cursor.execute("SELECT channel_id, channel_name FROM channels").fetchall()
    for channel_id, channel_name in channels:
        if message.chat.id == int(channel_id):
            post_link = f"https://t.me/{message.chat.username}/{message.message_id}"

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            subscribers = cursor.execute("SELECT user_id FROM subscribers WHERE channel_id = ?",
                                         (channel_id,)).fetchall()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ—Å—Ç–∞
            if message.chat.id not in notified_users:
                notified_users[message.chat.id] = {}
            notified_users[message.chat.id][message.message_id] = []

            for subscriber in subscribers:
                user_id = subscriber[0]
                try:
                    await bot.send_message(
                        user_id,
                        f"–ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ <b>{channel_name}</b>: <a href=\"{post_link}\">–°–º–æ—Ç—Ä–µ—Ç—å</a>\n"
                        f"–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ —ç—Ç–∏–º –ø–æ—Å—Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 5 –±–∞–ª–ª–æ–≤!"
                    )
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ—Å—Ç–∞
                    notified_users[message.chat.id][message.message_id].append(user_id)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω notified_users: {notified_users}")

# –ö–æ–º–∞–Ω–¥–∞ /points –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(commands=["points"])
async def points_command(message: types.Message):
    user_id = message.from_user.id
    result = cursor.execute("SELECT points FROM users_stat WHERE user_id = ?", (user_id,)).fetchone()

    if result:
        points = result[0]
        await message.answer(f"–£ –≤–∞—Å {points} –±–∞–ª–ª–æ–≤.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –±–∞–ª–ª–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ!")


# –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
notified_users = {}
logging.info(f"notified_users: {notified_users}")


# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
bad_words = [
    "–º–∞—Ç", "—Å—É–∫–∞", "–ø–∏–∑–¥–∞", "–µ–±–∞—Ç—å", "—Ö—É–π", "–ø–∏–∑–¥–µ—Ü", "—Å—É—á–∫–∞", "–µ–±–∞–Ω—ã–π", "—Ö–µ—Ä", "–∂–æ–ø–∞",
    "—à–ª—é—Ö–∞", "–±–ª—è–¥—å", "–µ–±–ª–æ", "–æ—Ç–ø–∏–∑–¥–∏—Ç—å", "–º—É–¥–∏–ª–∞", "–ø–µ–¥–∏–∫", "–ø–æ—à–µ–ª –Ω–∞—Ö—É–π", "–≥–∞–Ω–¥–æ–Ω",
    "–ø—Ä–∏–¥—É—Ä–æ–∫", "–¥—É—Ä–∞–∫", "—É—Ä–æ–¥", "–µ–±–∞—Ç—å", "–ø–µ—Ç—É—Ö", "–±–ª—è", "–∑–∞–ª—É–ø–∞", "–∑–∞—Å—Ä–∞–Ω–µ—Ü", "—É–±–ª—é–¥–æ–∫",
    "–º—Ä–∞–∑—å", "–æ—Å–µ–ª", "–∫–æ–∑–µ–ª", "–¥–æ–ª–±–æ–µ–±", "—Å–≤–∏–Ω—å—è", "—Å—É—á–∞—Ä–∞", "–ø–∏–¥–∞—Ä–∞—Å", "—Ç–≤–∞—Ä—å", "–≥–∞–Ω–¥–æ–Ω",
    "—Ö—Ä–µ–Ω", "—Å–æ—Å–∞", "–ø–∏—Å—å–∫–∞", "—Å—É–∫–∏", "–ø–æ—Ç–∞—Å–∫–∞—Ç—å", "–∏–¥–∏–æ—Ç", "–æ—Ç–º–æ—Ä–æ–∑–æ–∫", "–≥–æ–≤–Ω–æ", "–¥–µ—Ä—å–º–æ",
    "–ø–∞–¥–ª–æ", "—Ç—É–ø–æ–π", "–∑–∞–¥—Ä–æ—Ç", "—Ö—Ä–µ–Ω—å", "–º—É—Ç–∞–Ω—Ç", "–ª–æ—à–∞—Ä–∞"
]




@dp.message_handler()
async def on_user_comment(message: types.Message):
    """–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ —Ç–æ–ª—å–∫–æ —Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞."""
    user_id = message.from_user.id
    comment = message.text.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    if any(bad_word in comment for bad_word in bad_words):
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        await message.delete()
        await message.answer( "–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    cursor.execute("SELECT 1 FROM users_stat WHERE user_id = ?", (user_id,))
    if cursor.fetchone():  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
        cursor.execute("UPDATE users_stat SET points = points + 5 WHERE user_id = ?", (user_id,))
        conn.commit()
    else:
        await message.reply("–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
